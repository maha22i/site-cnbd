const fs = require('fs');
const path = require('path');

console.log('üîç Validation SEO Compl√®te - CNBD');
console.log('=====================================\n');

class SEOValidator {
  constructor() {
    this.errors = [];
    this.warnings = [];
    this.successes = [];
    this.outDir = path.join(__dirname, '../out');
  }

  // Ajouter un r√©sultat
  addResult(type, message, details = '') {
    const result = { message, details, timestamp: new Date().toISOString() };
    
    switch (type) {
      case 'error':
        this.errors.push(result);
        console.log(`‚ùå ${message}`);
        if (details) console.log(`   ${details}`);
        break;
      case 'warning':
        this.warnings.push(result);
        console.log(`‚ö†Ô∏è  ${message}`);
        if (details) console.log(`   ${details}`);
        break;
      case 'success':
        this.successes.push(result);
        console.log(`‚úÖ ${message}`);
        if (details) console.log(`   ${details}`);
        break;
    }
  }

  // V√©rifier la structure des fichiers
  checkFileStructure() {
    console.log('\nüìÅ V√©rification de la structure des fichiers...');
    
    // V√©rifier le dossier out
    if (!fs.existsSync(this.outDir)) {
      this.addResult('error', 'Dossier out/ manquant', 'Ex√©cutez npm run build d\'abord');
      return false;
    }
    this.addResult('success', 'Dossier out/ trouv√©');

    // V√©rifier les fichiers SEO essentiels
    const requiredFiles = [
      'sitemap.xml',
      'robots.txt',
      'index.html',
      'build-manifest.json'
    ];

    requiredFiles.forEach(file => {
      const filePath = path.join(this.outDir, file);
      if (fs.existsSync(filePath)) {
        this.addResult('success', `${file} pr√©sent`);
      } else {
        this.addResult('error', `${file} manquant`, `Fichier requis pour le SEO`);
      }
    });

    return true;
  }

  // V√©rifier le sitemap.xml
  checkSitemap() {
    console.log('\nüó∫Ô∏è V√©rification du sitemap.xml...');
    
    const sitemapPath = path.join(this.outDir, 'sitemap.xml');
    if (!fs.existsSync(sitemapPath)) {
      this.addResult('error', 'sitemap.xml manquant');
      return;
    }

    try {
      const sitemapContent = fs.readFileSync(sitemapPath, 'utf8');
      
      // V√©rifier le contenu XML
      if (sitemapContent.includes('<?xml')) {
        this.addResult('success', 'Sitemap XML valide');
      } else {
        this.addResult('error', 'Sitemap XML malform√©');
      }

      // Compter les URLs
      const urlMatches = sitemapContent.match(/<url>/g);
      const urlCount = urlMatches ? urlMatches.length : 0;
      
      if (urlCount > 0) {
        this.addResult('success', `${urlCount} URLs trouv√©es dans le sitemap`);
      } else {
        this.addResult('warning', 'Aucune URL trouv√©e dans le sitemap');
      }

      // V√©rifier les URLs hreflang
      if (sitemapContent.includes('hreflang')) {
        this.addResult('success', 'Attributs hreflang pr√©sents (bon pour i18n)');
      } else {
        this.addResult('warning', 'Attributs hreflang manquants');
      }

    } catch (error) {
      this.addResult('error', 'Erreur lecture sitemap.xml', error.message);
    }
  }

  // V√©rifier robots.txt
  checkRobots() {
    console.log('\nü§ñ V√©rification du robots.txt...');
    
    const robotsPath = path.join(this.outDir, 'robots.txt');
    if (!fs.existsSync(robotsPath)) {
      this.addResult('error', 'robots.txt manquant');
      return;
    }

    try {
      const robotsContent = fs.readFileSync(robotsPath, 'utf8');
      
      // V√©rifications essentielles
      if (robotsContent.includes('Sitemap:')) {
        this.addResult('success', 'R√©f√©rence au sitemap pr√©sente');
      } else {
        this.addResult('error', 'R√©f√©rence au sitemap manquante');
      }

      if (robotsContent.includes('User-agent: *')) {
        this.addResult('success', 'Directive User-agent globale pr√©sente');
      } else {
        this.addResult('warning', 'Directive User-agent globale manquante');
      }

      if (robotsContent.includes('Allow: /')) {
        this.addResult('success', 'Autorisation d\'indexation pr√©sente');
      } else {
        this.addResult('warning', 'Autorisation d\'indexation explicite manquante');
      }

    } catch (error) {
      this.addResult('error', 'Erreur lecture robots.txt', error.message);
    }
  }

  // V√©rifier les m√©tadonn√©es des pages principales
  checkMetadata() {
    console.log('\nüìã V√©rification des m√©tadonn√©es...');
    
    const pagesChecked = ['index.html', 'en/index.html'];
    
    pagesChecked.forEach(page => {
      const pagePath = path.join(this.outDir, page);
      if (!fs.existsSync(pagePath)) {
        this.addResult('warning', `Page ${page} non trouv√©e`);
        return;
      }

      try {
        const content = fs.readFileSync(pagePath, 'utf8');
        const pageName = page === 'index.html' ? 'Accueil FR' : 'Accueil EN';
        
        // V√©rifier les m√©tadonn√©es essentielles
        const checks = [
          { pattern: /<title>(.+?)<\/title>/, name: 'Title' },
          { pattern: /<meta[^>]+name="description"[^>]+content="([^"]+)"/, name: 'Description' },
          { pattern: /<meta[^>]+name="keywords"[^>]+content="([^"]+)"/, name: 'Keywords' },
          { pattern: /<meta[^>]+property="og:title"[^>]+content="([^"]+)"/, name: 'Open Graph Title' },
          { pattern: /<meta[^>]+property="og:description"[^>]+content="([^"]+)"/, name: 'Open Graph Description' },
          { pattern: /<meta[^>]+property="og:image"[^>]+content="([^"]+)"/, name: 'Open Graph Image' },
          { pattern: /<meta[^>]+name="twitter:card"[^>]+content="([^"]+)"/, name: 'Twitter Card' },
          { pattern: /<link[^>]+rel="canonical"[^>]+href="([^"]+)"/, name: 'Canonical URL' }
        ];

        checks.forEach(check => {
          const match = content.match(check.pattern);
          if (match) {
            this.addResult('success', `${check.name} pr√©sent (${pageName})`);
          } else {
            this.addResult('error', `${check.name} manquant (${pageName})`);
          }
        });

        // V√©rifier Schema.org JSON-LD
        if (content.includes('application/ld+json')) {
          this.addResult('success', `Schema markup pr√©sent (${pageName})`);
        } else {
          this.addResult('warning', `Schema markup manquant (${pageName})`);
        }

      } catch (error) {
        this.addResult('error', `Erreur lecture ${page}`, error.message);
      }
    });
  }

  // V√©rifier les images
  checkImages() {
    console.log('\nüñºÔ∏è V√©rification des images...');
    
    const publicDir = path.join(__dirname, '../public');
    const requiredImages = [
      'logo-cnbd.png',
      'favicon.ico',
      'france.png',
      'anglais.png'
    ];

    requiredImages.forEach(image => {
      const imagePath = path.join(publicDir, image);
      if (fs.existsSync(imagePath)) {
        this.addResult('success', `Image ${image} pr√©sente`);
      } else {
        this.addResult('warning', `Image ${image} manquante`);
      }
    });

    // V√©rifier les images Open Graph
    const ogImages = [
      'images/og-image-home.jpg',
      'images/og-image-services.jpg',
      'images/og-image-solutions.jpg'
    ];

    ogImages.forEach(image => {
      const imagePath = path.join(publicDir, image);
      if (fs.existsSync(imagePath)) {
        this.addResult('success', `Image OG ${image} pr√©sente`);
      } else {
        this.addResult('warning', `Image OG ${image} manquante`, 'Cr√©ez ces images pour am√©liorer le partage sur les r√©seaux sociaux');
      }
    });
  }

  // V√©rifier la performance
  checkPerformance() {
    console.log('\n‚ö° V√©rification des optimisations de performance...');
    
    const indexPath = path.join(this.outDir, 'index.html');
    if (!fs.existsSync(indexPath)) {
      this.addResult('error', 'index.html non trouv√© pour v√©rification performance');
      return;
    }

    try {
      const content = fs.readFileSync(indexPath, 'utf8');
      
      // V√©rifications de performance
      const perfChecks = [
        { pattern: /preload/, name: 'Ressources pr√©charg√©es', type: 'success' },
        { pattern: /dns-prefetch/, name: 'DNS Prefetch activ√©', type: 'success' },
        { pattern: /loading="lazy"/, name: 'Lazy loading images', type: 'success' },
        { pattern: /defer|async/, name: 'Scripts optimis√©s', type: 'success' }
      ];

      perfChecks.forEach(check => {
        if (content.match(check.pattern)) {
          this.addResult(check.type, check.name);
        } else {
          this.addResult('warning', `${check.name} manquant`);
        }
      });

    } catch (error) {
      this.addResult('error', 'Erreur v√©rification performance', error.message);
    }
  }

  // G√©n√©rer le rapport final
  generateReport() {
    console.log('\nüìä RAPPORT SEO FINAL');
    console.log('====================');
    
    const total = this.errors.length + this.warnings.length + this.successes.length;
    const score = Math.round((this.successes.length / total) * 100);
    
    console.log(`\nüéØ Score SEO: ${score}%`);
    console.log(`‚úÖ Succ√®s: ${this.successes.length}`);
    console.log(`‚ö†Ô∏è  Avertissements: ${this.warnings.length}`);
    console.log(`‚ùå Erreurs: ${this.errors.length}`);

    // Recommandations bas√©es sur le score
    if (score >= 90) {
      console.log('\nüèÜ Excellent ! Votre site est tr√®s bien optimis√© pour le SEO.');
    } else if (score >= 70) {
      console.log('\nüëç Bon travail ! Quelques am√©liorations mineures possibles.');
    } else if (score >= 50) {
      console.log('\n‚ö†Ô∏è  Des am√©liorations sont n√©cessaires pour un meilleur SEO.');
    } else {
      console.log('\nüö® Attention ! Des corrections importantes sont requises.');
    }

    // Sauvegarder le rapport
    const report = {
      date: new Date().toISOString(),
      score: score,
      total: total,
      results: {
        successes: this.successes,
        warnings: this.warnings,
        errors: this.errors
      },
      recommendations: this.generateRecommendations()
    };

    const reportPath = path.join(this.outDir, 'seo-validation-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüìÑ Rapport d√©taill√© sauvegard√© : out/seo-validation-report.json`);

    return score >= 70; // Retourne true si le score est acceptable
  }

  // G√©n√©rer des recommandations
  generateRecommendations() {
    const recommendations = [];
    
    if (this.errors.length > 0) {
      recommendations.push('Corriger toutes les erreurs critiques identifi√©es');
    }
    
    if (this.warnings.length > 5) {
      recommendations.push('Traiter les avertissements pour am√©liorer le score SEO');
    }
    
    recommendations.push('Configurer Google Search Console et soumettre le sitemap');
    recommendations.push('Cr√©er les images Open Graph manquantes');
    recommendations.push('Tester r√©guli√®rement avec Lighthouse et PageSpeed Insights');
    recommendations.push('Surveiller les Core Web Vitals');
    
    return recommendations;
  }

  // Ex√©cuter toutes les validations
  runFullValidation() {
    console.log('üöÄ D√©marrage de la validation SEO compl√®te...\n');
    
    if (!this.checkFileStructure()) {
      console.log('\n‚ùå Validation interrompue : structure de fichiers invalide');
      return false;
    }
    
    this.checkSitemap();
    this.checkRobots();
    this.checkMetadata();
    this.checkImages();
    this.checkPerformance();
    
    return this.generateReport();
  }
}

// Ex√©cuter la validation
const validator = new SEOValidator();
const success = validator.runFullValidation();

console.log('\nüîó Liens utiles pour tester votre SEO :');
console.log('‚Ä¢ Google Search Console: https://search.google.com/search-console');
console.log('‚Ä¢ Google Rich Results Test: https://search.google.com/test/rich-results');
console.log('‚Ä¢ Facebook Debugger: https://developers.facebook.com/tools/debug/');
console.log('‚Ä¢ Twitter Card Validator: https://cards-dev.twitter.com/validator');
console.log('‚Ä¢ PageSpeed Insights: https://pagespeed.web.dev/');

process.exit(success ? 0 : 1); 